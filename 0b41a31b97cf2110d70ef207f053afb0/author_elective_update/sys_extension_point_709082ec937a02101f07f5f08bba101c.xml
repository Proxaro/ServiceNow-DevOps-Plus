<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_extension_point">
    <sys_extension_point action="DELETE">
        <api_name>x_424426_devops.CodeSearchExt</api_name>
        <description/>
        <example><![CDATA[/* global global, gs */
/* global Class, GlideRecord, GlideStringUtil */
/* eslint no-undef: "error" */
var CodeSearchExt = Class.create();
CodeSearchExt.prototype = {
    initialize: function() {

    },

	handlesScope: function (scopeName) {
		var extScopeName = gs.getCurrentScopeName();
		if (['rhino.global', 'global'].includes(extScopeName)) {
			return scopeName == 'global';
		}

		return scopeName == extScopeName;
	},

	handlesTable: function (tableName) {
		var extScopeName = gs.getCurrentScopeName();
		if (['rhino.global', 'global'].includes(extScopeName)) {
			extScopeName = 'global';
		}

		var dbObjectGr = new GlideRecord('sys_db_object');
		dbObjectGr.addQuery('name', tableName);
		dbObjectGr.addQuery('sys_scope.scope', extScopeName);
		dbObjectGr.setLimit(1);
		dbObjectGr.query();
		return dbObjectGr.hasNext();
	},

    search: function(config) {
        var anyGr = new GlideRecord(config.table);
		var fields = ['sys_id'];
		config.fields.forEach(function (f) {
			if (anyGr.isValidField(f) && fields.indexOf(f) == -1) {
				fields.push(f);
			}
		});

		if (config.additional_filter) {
			anyGr.addEncodedQuery(config.additional_filter);
		}

		var term = GlideStringUtil.escapeQueryTermSeparator(config.term);
		var query = ['sys_id=' + term].concat(fields.slice(1).map(function (f) {
			return f + 'LIKE' + term;
		})).join('^OR');
		anyGr.addEncodedQuery(query);

		if (config.scope && anyGr.isValidField('sys_scope')) {
			anyGr.addQuery('sys_scope', config.scope);
		}

		if (anyGr.isValidField('sys_class_name')) {
			if (config.match_class) {
				anyGr.addQuery('sys_class_name', config.table);
			}

			anyGr.orderBy('sys_class_name');
		}

		if (anyGr.isValidField('sys_name')) {
			anyGr.orderBy('sys_name');
		}

		if (config.limit) {
			anyGr.setLimit(config.limit);
		}

		anyGr.query();

		var result = {
			tableLabel: anyGr.getLabel(),
			hits: []
		};

		while (anyGr.next()) {
			var matches = getMatches(anyGr, fields, config.term);
			if (matches.length) {
				result.hits.push({
					name: anyGr.getDisplayValue() || anyGr.getUniqueValue(),
					className: anyGr.getRecordClassName(),
					matches: matches,
					sysId: anyGr.getUniqueValue()
				});
			}
		}

		return result;

		function getMatches(anyGr, fields, term) {
			var matches = [];
			fields.forEach(function (field) {
				var element = anyGr.getElement(field);
				if (element) {
					var match = {
						fieldLabel: element.getLabel(),
						lineMatches: getMatchingLines(element.toString(), term)
					};

					match.lineMatches.forEach(function (lineMatch) {
						if (lineMatch.contex.length > 500) {
							lineMatch.context = lineMatch.context.substring(0, 500) + '...';						
						}
					});

					matches.push(match);
				}
			});

			return matches;
		}

		function getMatchingLines(text, term) {
			var lineMatches = [];
			var scanProgress = 0;
			var lines = text.split(/\\r\\n|\\r|\\n/g);
			for (var j = 0; j < lines.length; j++) {
				var line = lines[j];
				if (line.toLowerCase().includes(term.toLowerCase())) {
					if (j > 0 && j > scanProgress + 1) {
						lineMatches.push({line: (j), context: lines[j - 1]});
					}

					lineMatches.push({line: (j + 1), context: line});

					if (j < lines.length - 1) {
						lineMatches.push({line: (j + 2), context: lines[j + 1]});
					}

					scanProgress = j;
				}
			}

			return lineMatches;
		}
    },

    type: 'CodeSearchExt'
};]]></example>
        <name>CodeSearchExt</name>
        <restrict_scope>false</restrict_scope>
        <sys_class_name>sys_extension_point</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-11 20:15:02</sys_created_on>
        <sys_id>709082ec937a02101f07f5f08bba101c</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>CodeSearchExt</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_extension_point_709082ec937a02101f07f5f08bba101c</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-06-11 22:25:40</sys_updated_on>
    </sys_extension_point>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</application>
        <file_path/>
        <instance_id>8e74c4eadba2f910caf99027c59619e3</instance_id>
        <instance_name>dev217055</instance_name>
        <name>sys_extension_point_709082ec937a02101f07f5f08bba101c</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_extension_point"&gt;&lt;sys_extension_point action="INSERT_OR_UPDATE"&gt;&lt;api_name&gt;x_424426_devops.CodeSearchExt&lt;/api_name&gt;&lt;description/&gt;&lt;example&gt;&lt;![CDATA[/* global global, gs */
/* global Class, GlideRecord, GlideStringUtil */
/* eslint no-undef: "error" */
var CodeSearchExt = Class.create();
CodeSearchExt.prototype = {
    initialize: function() {

    },

	handlesScope: function (scopeName) {
		var extScopeName = gs.getCurrentScopeName();
		if (['rhino.global', 'global'].includes(extScopeName)) {
			return scopeName == 'global';
		}

		return scopeName == extScopeName;
	},

	handlesTable: function (tableName) {
		var extScopeName = gs.getCurrentScopeName();
		if (['rhino.global', 'global'].includes(extScopeName)) {
			extScopeName = 'global';
		}

		var dbObjectGr = new GlideRecord('sys_db_object');
		dbObjectGr.addQuery('name', tableName);
		dbObjectGr.addQuery('sys_scope.scope', extScopeName);
		dbObjectGr.setLimit(1);
		dbObjectGr.query();
		return dbObjectGr.hasNext();
	},

    search: function(config) {
        var anyGr = new GlideRecord(config.table);
		var fields = ['sys_id'];
		config.fields.forEach(function (f) {
			if (anyGr.isValidField(f) &amp;&amp; fields.indexOf(f) == -1) {
				fields.push(f);
			}
		});

		if (config.additional_filter) {
			anyGr.addEncodedQuery(config.additional_filter);
		}

		var term = GlideStringUtil.escapeQueryTermSeparator(config.term);
		var query = ['sys_id=' + term].concat(fields.slice(1).map(function (f) {
			return f + 'LIKE' + term;
		})).join('^OR');
		anyGr.addEncodedQuery(query);

		if (config.scope &amp;&amp; anyGr.isValidField('sys_scope')) {
			anyGr.addQuery('sys_scope', config.scope);
		}

		if (anyGr.isValidField('sys_class_name')) {
			if (config.match_class) {
				anyGr.addQuery('sys_class_name', config.table);
			}

			anyGr.orderBy('sys_class_name');
		}

		if (anyGr.isValidField('sys_name')) {
			anyGr.orderBy('sys_name');
		}

		if (config.limit) {
			anyGr.setLimit(config.limit);
		}

		anyGr.query();

		var result = {
			tableLabel: anyGr.getLabel(),
			hits: []
		};

		while (anyGr.next()) {
			var matches = getMatches(anyGr, fields, config.term);
			if (matches.length) {
				result.hits.push({
					name: anyGr.getDisplayValue() || anyGr.getUniqueValue(),
					className: anyGr.getRecordClassName(),
					matches: matches,
					sysId: anyGr.getUniqueValue()
				});
			}
		}

		return result;

		function getMatches(anyGr, fields, term) {
			var matches = [];
			fields.forEach(function (field) {
				var element = anyGr.getElement(field);
				if (element) {
					var match = {
						fieldLabel: element.getLabel(),
						lineMatches: getMatchingLines(element.toString(), term)
					};

					match.lineMatches.forEach(function (lineMatch) {
						if (lineMatch.contex.length &gt; 500) {
							lineMatch.context = lineMatch.context.substring(0, 500) + '...';						
						}
					});

					matches.push(match);
				}
			});

			return matches;
		}

		function getMatchingLines(text, term) {
			var lineMatches = [];
			var scanProgress = 0;
			var lines = text.split(/\\r\\n|\\r|\\n/g);
			for (var j = 0; j &lt; lines.length; j++) {
				var line = lines[j];
				if (line.toLowerCase().includes(term.toLowerCase())) {
					if (j &gt; 0 &amp;&amp; j &gt; scanProgress + 1) {
						lineMatches.push({line: (j), context: lines[j - 1]});
					}

					lineMatches.push({line: (j + 1), context: line});

					if (j &lt; lines.length - 1) {
						lineMatches.push({line: (j + 2), context: lines[j + 1]});
					}

					scanProgress = j;
				}
			}

			return lineMatches;
		}
    },

    type: 'CodeSearchExt'
};]]&gt;&lt;/example&gt;&lt;name&gt;CodeSearchExt&lt;/name&gt;&lt;restrict_scope&gt;false&lt;/restrict_scope&gt;&lt;sys_class_name&gt;sys_extension_point&lt;/sys_class_name&gt;&lt;sys_created_by&gt;markus.kraus&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-06-11 20:15:02&lt;/sys_created_on&gt;&lt;sys_id&gt;709082ec937a02101f07f5f08bba101c&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;CodeSearchExt&lt;/sys_name&gt;&lt;sys_package display_value="DevOps+" source="x_424426_devops"&gt;0b41a31b97cf2110d70ef207f053afb0&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="DevOps+"&gt;0b41a31b97cf2110d70ef207f053afb0&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_extension_point_709082ec937a02101f07f5f08bba101c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;markus.kraus&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-06-11 22:25:40&lt;/sys_updated_on&gt;&lt;/sys_extension_point&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1301137700</payload_hash>
        <record_name>CodeSearchExt</record_name>
        <reverted_from/>
        <source>18941154931102101f07f5f08bba104f</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-11 22:25:40</sys_created_on>
        <sys_id>e8226a24933e02101f07f5f08bba1031</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>19009682dfd0000001</sys_recorded_at>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-06-11 22:25:40</sys_updated_on>
        <type>Extension Point</type>
        <update_guid>a0226a24ea3e021030248bd9cce90c31</update_guid>
        <update_guid_history>a0226a24ea3e021030248bd9cce90c31:-1301137700,caddce685cba02107fe2d8b25d665207:-1577809571,be344aec9e7a0210bf08f683986e5172:1980675167</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-12 06:06:22</sys_created_on>
        <sys_db_object display_value="" name="sys_extension_point">sys_extension_point</sys_db_object>
        <sys_id>0607064645da42d6811f7b28af6fb8a4</sys_id>
        <sys_metadata>709082ec937a02101f07f5f08bba101c</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CodeSearchExt</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_scope_delete display_value="">13019d42a0194df0a6459d2c1b62b640</sys_scope_delete>
        <sys_update_name>sys_extension_point_709082ec937a02101f07f5f08bba101c</sys_update_name>
        <sys_update_version display_value="sys_extension_point_709082ec937a02101f07f5f08bba101c">e8226a24933e02101f07f5f08bba1031</sys_update_version>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-06-12 06:06:22</sys_updated_on>
    </sys_metadata_delete>
</record_update>
