<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchHandlerFlow</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_424426_devops.CodeSearchHandler</description>
        <mobile_callable>false</mobile_callable>
        <name>CodeSearchHandlerFlow</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global global, gs, x_424426_devops */
/* global Class, GlideRecordSecure, GlideStringUtil */
/* eslint no-undef: "error" */
var CodeSearchHandlerFlow = Class.create();
CodeSearchHandlerFlow.prototype = Object.extendsObject(x_424426_devops.CodeSearchHandlerBase, {
    initialize: function() {
		x_424426_devops.CodeSearchHandlerBase.prototype.initialize.apply(this, arguments);
    },

     handlesScope: function (scopeName) {
		return scopeName == 'global';
	},

	handlesTable: function (tableName) {
		return tableName == 'sys_hub_flow';
	},

	/**
	 * search in the supplied table using the (fixed) context
	 * @param {string} table
	 * @param {string} term
	 * @param {{fields: Object<string, {type: string}>?, exact: boolean?, search_related: boolean?, additional_filter: string?, scope: string?, limit: number?, match_table: boolean?, }} [options]
	 * @return {{tableLabel: string, hits: {name: string, className: string, matches: {fieldLabel: string, lineMatches: {line: number, context: string}[]}[], sysId: string}}}
	 */
	search: function (table, term, options) {
        const fields = options?.fields || this.getFields(table);
		let query = [];
		if (options?.additional_filter)
			query.push(options.additional_filter);

		if (options?.scope)
			query.push('sys_scope=' + options.scope);

		if (options?.match_table)
			query.push('sys_class_name=' + table);

		const flowGr = new GlideRecordSecure('sys_hub_flow');
		if (query.length)
			flowGr.addEncodedQuery(query.join('^'));

		const fieldQuery = [];
		for (const field in fields) {
			fieldQuery.push(field + (options?.exact ? '=' : 'LIKE') + term);
		}

		if (fieldQuery.length) {
			flowGr.addEncodedQuery(fieldQuery.join('^OR'));
		}
		
		// with related search active, any match in a related record counts as a match for the parent record
		// => we also have to search the whole table unconditionally as well
		if (options?.search_related && query.length)
			flowGr.addEncodedQuery('^NQ' + query.join('^'));

		flowGr.orderBy('sys_class_name');
		flowGr.orderBy('sys_name');

		if (options?.limit) {
			flowGr.setLimit(options.limit);
		}

		flowGr.query();

		const result = {
			tableLabel: flowGr.getLabel(),
			hits: []
		};

		while (flowGr.next()) {
			const hit = {
				name: flowGr.getDisplayValue() || flowGr.getUniqueValue(),
				className: flowGr.getRecordClassName(),
				matches: this.getMatches(flowGr, fields, term),
				sysId: flowGr.getUniqueValue()
			};

			if (options?.search_related) {
				const flowTriggerGr = new GlideRecordSecure('sys_hub_trigger_instance');
				flowTriggerGr.addQuery('flow', flowGr.sys_id);
				flowTriggerGr.query();
				while (flowTriggerGr.next()) {
					const variableGr = new GlideRecordSecure('sys_variable_value');
					variableGr.addQuery('document', 'sys_hub_trigger_instance');
					variableGr.addQuery('document_key', flowTriggerGr.sys_id);
					variableGr.addQuery('value', 'CONTAINS', term);
					variableGr.query();
					while (variableGr.next()) {
						hit.matches = hit.matches.concat(
							this.getMatches(variableGr, ['value'], term)
						);
					}
				}

				const actionInstanceGr = new GlideRecordSecure('sys_hub_action_instance');
				actionInstanceGr.addQuery('flow', flowGr.sys_id);
				actionInstanceGr.orderBy('order');
				actionInstanceGr.query();
				while (actionInstanceGr.next()) {
					const variableGr = new GlideRecordSecure('sys_variable_value');
					variableGr.addQuery('document', 'sys_hub_action_instance');
					variableGr.addQuery('document_key', flowTriggerGr.sys_id);
					variableGr.addQuery('value', 'CONTAINS', term);
					variableGr.query();
					while (variableGr.next()) {
						hit.matches = hit.matches.concat(
							this.getMatches(variableGr, ['value'], term)
						);
					}
				}
			}

			if (hit.matches.length) {
				result.hits.push(hit);
			}
		}

		return result;
    },

    type: 'CodeSearchHandlerFlow'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-13 16:30:28</sys_created_on>
        <sys_id>b4046f8993f2c2101f07f5f08bba10f8</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>CodeSearchHandlerFlow</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_b4046f8993f2c2101f07f5f08bba10f8</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-07 11:56:16</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>b4046f8993f2c2101f07f5f08bba10f8</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-07 11:49:06</sys_created_on>
        <sys_id>24556fd4837116900971c810feaad341</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-07 11:49:06</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
