<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Entry point for handling:&#13;
- "find references"&#13;
- code search itself&#13;
- code search config: generate config for {all|metadata|custom} search</description>
        <name>CodeSearchUtilClient</name>
        <script><![CDATA[/* global global, gs, sn_scoped_cache, x_424426_devops */
/* global Class, GlideRecordSecure, GlideAggregate, GlideStringUtil, GlideTableHierarchy, GlideScopedEvaluator, GlideScriptedExtensionPoint, GlideDateTime */
/* eslint no-undef: "error" */
var CodeSearchUtilClient = Class.create();
CodeSearchUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function () {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
		this.startTime = new GlideDateTime();
	},

	_getLogLink: function () {
		const logGr = new GlideRecordSecure('syslog');
		logGr.addQuery('source', 'Evaluator')
			.addOrCondition('source', gs.getCurrentScopeName())
			.addOrCondition('source', 'com.glide.ui.ServletErrorListener');
		logGr.addQuery('sys_created_by', gs.getUserName());
		logGr.addEncodedQuery('sys_created_onBETWEEN' + this.startTime + '@' + new GlideDateTime());
		return `<a href="/nav_to.do?uri=%2Fsyslog_list.do%3Fsysparm_query%3DencodeURIComponent(${logGr.getEncodedQuery()})" target="_blank">Logs</a>`;
	},
	
	searchReference: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const table = this.getParameter('table');
		let fields = [];
		try {
			fields = JSON.parse(this.getParameter('fields'));
			if (!(fields instanceof Array)) {
				throw new Error();
			}
		} catch (e) {
			result.message = 'Invalid fields';
			return JSON.stringify(result);
		}

		const sysID = this.getParameter('sys_id');
		if (table && fields && sysID) {
			const dbObjectGr = new GlideRecordSecure('sys_db_object');
			dbObjectGr.addQuery('name', table);
			dbObjectGr.setLimit(1);
			dbObjectGr.query();
			if (dbObjectGr.next()) {
				const scriptGr = new GlideRecordSecure('sys_rte_eb_script_operation');
				scriptGr.addQuery('sys_id', '97fdb21397db71103c2d3f56f053af8c');
				scriptGr.setLimit(1);
				scriptGr.query();
				if (scriptGr.next()) {
					// Note: Never set sys_scope to null in scoped apps (this will cause a NullPointerException)
					scriptGr.sys_scope = dbObjectGr.sys_scope.toString();

					// Note: Building an encoded query is required to prevent db-error to occurr (it is unknown why this happens!)
					scriptGr.script = `
						(function (table, fields, sys_id) {
							var anyGr = new GlideRecordSecure(table);
							if (anyGr.isValidField('sys_class_name')) {
								anyGr.addQuery('sys_class_name', table);
							}
							
							var fieldQuery = fields
								.map(function (f) { 
									var element = anyGr.getElement(f);
									if (element != null) {
										var type = element.getED().getInternalType();
										if (type == 'reference') return f + '=' + sys_id;
										else if (type == 'glide_list') return f + 'LIKE' + sys_id;
									}
								})
								.filter(function (queryPart) { return !!queryPart; })
								.join('^OR');
							anyGr.addEncodedQuery(fieldQuery);
							anyGr.query();
							
							var result = {
								recordType: table,
								tableLabel: anyGr.getLabel(),
								hits: []
							};
							
							while (anyGr.next()) {
								result.hits.push({
									name: anyGr.getDisplayValue(),
									className: anyGr.getRecordClassName(),
									tableLabel: anyGr.getTableName(),
									sysId: anyGr.getUniqueValue()
								});
							}
							
							return result;
						})(table, JSON.parse(fields), sys_id);
					`;
					
					result.search_result = new GlideScopedEvaluator().evaluateScript(scriptGr, 'script', { 
						table: table,
						fields: JSON.stringify(fields),
						sys_id: sysID
					});
					
					result.status = 'success';
				} else {
					result.message = 'Unable to run script';
				}
			} else {
				result.message = 'Unable to find table';
			}
		} else {
			result.message = 'Invalid parameters!';
		}
		
		return JSON.stringify(result);
	},

	getConfig: function () {
		const result = {
			status: 'error',
			message: ''
		};

		let params = null;
		try {
			params = JSON.parse(this.getParameter('params'));
		} catch (e) {
			result.message = 'Invalid params!';
			return JSON.stringify(result);
		}

		if (params.script) {
			const prefGr = new GlideRecordSecure('sys_user_preference');
			prefGr.addQuery('name', 'STARTSWITH', 'devops_code_search_script');
			prefGr.addQuery('sys_id', params.script);
			prefGr.setLimit(1);
			prefGr.query();
			if (prefGr.next()) {
				const gse = new GlideScopedEvaluator();
				gse.putVariable('action', 'config');
				gse.putVariable('params', params);
				gse.putVariable('table', null);
				gse.putVariable('context', null);
				try {
					const scriptResult = JSON.parse(JSON.stringify(gse.evaluateScript(prefGr, 'value')));
					if (scriptResult.tables instanceof Array) {
						result.tables = scriptResult.tables;
						result.context = scriptResult.context;
						result.status = 'success';
					} else
						result.message = 'Invalid result type returned by getConfig';
				} catch (e) {
					result.message = 'Failed to execute getConfig with Search Script: ' + e;
				}
			} else
				result.message = 'Invalid Search Script';
		} else if (params.table && gs.tableExists(params.table)) {
			result.tables = [];
			result.context = {
				term: params.term,
				match_table: true,
				all_fields: true,
				scope: params.scope,
				limit: 500
			};

			if (params.table == 'sys_metadata') {
				result.context.search_related = true;
			}

			result.tables = getSortedTables(params.table, params.scope, 'sys_updated_on');
			result.status = 'success';
		} else {
			result.message = 'Invalid parameters';
		}

		return JSON.stringify(result);

		function getSortedTables(baseTable, scope, orderBy) {
			const tables = [baseTable, ...new GlideTableHierarchy(baseTable).getTableExtensions()];
			if (tables.length == 1)
				return tables;

			const cacheKey = (scope || '') + (orderBy || '');
			if (cacheKey) {
				const sortedTables = sn_scoped_cache.ScopedCacheManager.get('devops_plus_code_sorted_tables', cacheKey);
				if (sortedTables)
					return JSON.parse(sortedTables);
			}

			// reorder the list of tables so that the last changed application files get searched first
			const anyGa = new GlideAggregate(params.table);
			if (scope)
				anyGa.addQuery('sys_scope', scope);
			
			if (orderBy) {
				anyGa.addAggregate('MAX', orderBy);
				anyGa.orderByAggregate('MAX', orderBy);
			}
			
			anyGa.groupBy('sys_class_name');
			anyGa.query();

			const sortedTables = [];
			while (anyGa.next()) {
				const klass = anyGa.getValue('sys_class_name');
				const pos = tables.indexOf(klass);
				if (pos != -1) {
					sortedTables.push(tables[pos]);
					tables.slice(pos, 1);
				}
			}

			if (cacheKey)
				sn_scoped_cache.ScopedCacheManager.get('devops_plus_code_sorted_tables', cacheKey, JSON.stringify(sortedTables));

			return sortedTables;
		}
	},
	
	// the OOTB code search only allows for sys_metadata tables to be searched - even though you can configure the sn_codesearch_table otherwise,
	// this is "by design" and won't be fixed (this is the response for a HI ticket I've created...)
	// therefore the following function is mostly a replica of the OOTB search functionality:
	// /nav_to.do?uri=sys_script_include.do?sys_id=1717eb60d7120200b6bddb0c825203da
	searchTerm: function () {
		const result = {
			status: 'error',
			message: ''
		};

		const table = this.getParameter('table');
		const script = this.getParameter('script');
		let context = null;
		try {
			context = JSON.parse(this.getParameter('context'));
			if (!context) throw new Error(); // empty context cannot yield a reasonable result
		} catch (e) {
			result.message = 'Invalid context!';
			return JSON.stringify(result);
		}

		if (table && gs.tableExists(table)) {
			if (script) {
				const prefGr = new GlideRecordSecure('sys_user_preference');
				prefGr.addQuery('name', 'STARTSWITH', 'devops_code_search_script');
				prefGr.addQuery('sys_id', script);
				prefGr.setLimit(1);
				prefGr.query();
				if (prefGr.next()) {
					const gse = new GlideScopedEvaluator();
					gse.putVariable('action', 'search');
					gse.putVariable('params', null);
					gse.putVariable('table', table);
					gse.putVariable('context', context);
					const scriptResult = gse.evaluateScript(prefGr, 'value');
					if (scriptResult) {
						if (scriptResult.tableLabel && scriptResult.hits) {
							if (scriptResult.hits.every(hit => {
								return hit.name && hit.className && hit.sysId && hit.matches.every(match => {
									return match.fieldLabel && match.lineMatches.every(lineMatch => {
										return lineMatch.line && lineMatch.context;
									});
								});
							})) {
								result.search_result = scriptResult;
								result.status = 'success';
							} else
								result.message = 'Invalid Result Type from Search Script';
						} else
							result.message = 'Invalid Result Type from Search Script';
					} else
						result.message = 'Search Script failed: ' + this._getLogLink();
				} else
					result.message = 'Unknown script';
			}
			else {
				const dbObjectGr = new GlideRecordSecure('sys_db_object');
				dbObjectGr.addQuery('name', table);
				dbObjectGr.addNotNullQuery('sys_scope.scope');
				dbObjectGr.setLimit(1);
				dbObjectGr.query();
				if (dbObjectGr.next()) {
					const scopeName = dbObjectGr.sys_scope.scope.toString();
					const searchHandlers = new GlideScriptedExtensionPoint().getExtensions('CodeSearchHandler');

					result.message = `No Search Handler found to handle ${scopeName}::${table}`;
					for (let i = 0; i < searchHandlers.length; i++) {
						try {
							searchHandlers[i].initialize();
							if (searchHandlers[i].handlesScope(scopeName) && searchHandlers[i].handlesTable(table)) {
								result.search_result = searchHandlers[i].search(table, context);
								if (result.search_result) {
									result.message = '';
									result.status = 'success';
								} else
									result.message = 'Search Handler failed to search: ' + this._getLogLink();

								break;
							}
						} catch (e) {
							result.message = `SearchHandler ${i} failed (${e}): ${this._getLogLink()}\n${e.stack}`;
						}
					}
				} else {
					// user does not have access to this table (e.g. scoped administration)
					result.status = 'success';
					result.search_result = {
						tableLabel: table,
						hits: []
					};
				}
			}
		} else
			result.message = 'Invalid parameters!';

		try {
			// exception will be thrown when the result object is too large!
			return JSON.stringify(result);
		} catch (e) {
			return JSON.stringify({
				status: 'error',
				message: 'Failed to JSON.stringify(result): ' + e
			});
		}
	},

    type: 'CodeSearchUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-07 10:12:54</sys_created_on>
        <sys_id>35fdd6d597d32110d70ef207f053afcd</sys_id>
        <sys_mod_count>152</sys_mod_count>
        <sys_name>CodeSearchUtilClient</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_35fdd6d597d32110d70ef207f053afcd</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-07-06 19:25:23</sys_updated_on>
    </sys_script_include>
</record_update>
