<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>CodeSearchUtilClient</name>
        <script><![CDATA[/* global global, gs, sn_scoped_cache */
/* global Class, GlideRecordSecure, GlideStringUtil, GlideTableHierarchy, GlideScopedEvaluator, GlideDateTime */
/* eslint no-undef: "error" */
var CodeSearchUtilClient = Class.create();
CodeSearchUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function () {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
	},
	
	searchReference: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const table = this.getParameter('table');
		const fields = this.getParameter('fields');
		const sysID = this.getParameter('sys_id');
		const limit = this.getParameter('limit') || 500;
		
		if (table && fields && sysID) {			
			const dbObjectGr = new GlideRecordSecure('sys_db_object');
			dbObjectGr.addQuery('name', table);
			dbObjectGr.setLimit(1);
			dbObjectGr.query();
			if (dbObjectGr.next()) {
				const scriptGr = new GlideRecordSecure('sys_rte_eb_script_operation');
				scriptGr.addQuery('sys_id', '97fdb21397db71103c2d3f56f053af8c');
				scriptGr.setLimit(1);
				scriptGr.query();
				if (scriptGr.next()) {
					scriptGr.sys_scope = dbObjectGr.sys_scope.toString();
					// Note: Building an encoded query is required to prevent db-error to occurr (it is unknown why this happens!)
					scriptGr.script = `
						(function (table, fields, sys_id) {
							var anyGr = new GlideRecordSecure(table);
							var fieldQuery = fields
								.split(",")
								.filter(function (f) { return anyGr.isValidField(f); })
								.map(function (f) { return f + "=" + sys_id; })
								.join("^OR");
							anyGr.addEncodedQuery(fieldQuery);
							anyGr.query();
							
							var result = {
								recordType: table,
								tableLabel: anyGr.getLabel(),
								hits: []
							};
							
							while (anyGr.next()) {
								result.hits.push({
									name: anyGr.getDisplayValue(),
									className: anyGr.getRecordClassName(),
									tableLabel: anyGr.getTableName(),
									sysId: anyGr.getUniqueValue()
								});
							}
							
							return result;
						})(table, fields, sys_id);
					`;
					
					result.search_result = new GlideScopedEvaluator().evaluateScript(scriptGr, 'script', { 
						table: table,
						fields: fields,
						sys_id: sysID
					});
					
					result.status = 'success';
				} else {
					result.message = 'Unable to run script';
				}
			} else {
				result.message = 'Unable to find table';
			}
		} else {
			result.message = 'Invalid parameters!';
		}
		
		return JSON.stringify(result);
	},
	
	// the OOTB code search only allows for sys_metadata tables to be searched - even though you can configure the sn_codesearch_table otherwise,
	// this is "by design" and won't be fixed (this is the response for a HI ticket I've created...)
	// therefore the following function is mostly a replica of the OOTB search functionality:
	// /nav_to.do?uri=sys_script_include.do?sys_id=1717eb60d7120200b6bddb0c825203da
	searchTerm: function () {
		const result = {
			status: 'error',
			message: ''
		};

		const table = this.getParameter('table');
		const term = this.getParameter('term');
		const scope = this.getParameter('scope');
		const allScopes = this.getParameter('allScopes');
		
		const limit = this.getParameter('limit');
		
		// column + record => decrypt
		// searchGroup => generic code search
		// searchType
		let config = this.getParameter('config');		
		if (table && config && term && gs.tableExists(table)) {
			try {
				config = JSON.parse(config);
			} catch (e) {
				result.message = 'Invalid config!';
				return JSON.stringify(result);
			}
			
			let additionalFilter = '';
			let fields = [];
			
			if (config.record && config.column) {
				// small adjustment to make this script be usable by the application file decrypter
				additionalFilter = 'sys_id=' + config.record;
				fields.push(config.column);
			} else if (config.all_columns) {
				let cachedFields = sn_scoped_cache.ScopedCacheManager.get('devops_plus_code_search_columns', table);
				if (cachedFields) {
					fields = JSON.parse(cachedFields);
				} else {
					const dictionaryGr = new GlideRecordSecure('sys_dictionary');
					dictionaryGr.addQuery('name', 'IN', new GlideTableHierarchy(table).getTables());
					dictionaryGr.addQuery('internal_type.scalar_type', 'string');
					dictionaryGr.addQuery('internal_type.name', '!=', 'collection');
					dictionaryGr.query();
					while (dictionaryGr.next()) {
						const fieldName = dictionaryGr.element.toString();
						if (!fields.includes(fieldName)) {
							fields.push(fieldName);
						}
					}
					
					sn_scoped_cache.ScopedCacheManager.put('devops_plus_code_search_columns', table, JSON.stringify(fields));
				}
			} else if (config.group) {
				const searchGroupGr = new GlideRecordSecure('sn_codesearch_search_group');
				searchGroupGr.addQuery('name', config.group);
				searchGroupGr.setLimit(1);
				searchGroupGr.query();
				if (searchGroupGr.next()) {
					const tableConfigGr = new GlideRecordSecure('sn_codesearch_table');
					tableConfigGr.addQuery('search_group', searchGroupGr.sys_id);
					tableConfigGr.addQuery('table', table);
					tableConfigGr.setLimit(1);
					tableConfigGr.query();
					if (tableConfigGr.next()) {
						if (tableConfigGr.additional_filter) {
							additionalFilter = tableConfigGr.additional_filter.toString();
						}

						if (tableConfigGr.search_fields) {
							fields = tableConfigGr.search_fields.split(',').map(f => f.trim()).filter(f => !!f);
						}
					}

					if (searchGroupGr.extended_matching) {
						const dictionaryGr = new GlideRecordSecure('sys_dictionary');
						dictionaryGr.addQuery('name', 'IN', new GlideTableHierarchy(table).getTables());
						dictionaryGr.addQuery('internal_type.scalar_type', 'string');
						dictionaryGr.addQuery('internal_type.name', '!=', 'collection');
						dictionaryGr.addQuery('element', '!=', 'sys_update_name');
						dictionaryGr.addQuery('max_length', '>=', 80);
						dictionaryGr.query();
						while (dictionaryGr.next()) {
							const fieldName = dictionaryGr.element.toString();
							if (!fields.includes(fieldName)) {
								fields.push(fieldName);
							}
						}
					}
				}
			} else if (config.script) {
				const prefGr = new GlideRecordSecure('sys_user_preference');
				prefGr.addQuery('sys_id', config.script);
				prefGr.setLimit(1);
				prefGr.query();
				if (prefGr.next()) {				
					const scriptGr = new GlideRecordSecure('sys_rte_eb_script_operation');
					scriptGr.addQuery('sys_id', '97fdb21397db71103c2d3f56f053af8c');
					scriptGr.setLimit(1);
					scriptGr.query();
					if (scriptGr.next()) {
						scriptGr.sys_scope = 'global';
						scriptGr.script = prefGr.value.toString();
						fields = new GlideScopedEvaluator().evaluateScript(scriptGr, 'script', { 
							table: table
						});
					} else {
						result.message = 'Failed to execute script';
					}
				} else {
					result.message = 'Failed to retrieve script';
				}
			}
			
			const dbObjectGr = new GlideRecordSecure('sys_db_object');
			dbObjectGr.addQuery('name', table);
			dbObjectGr.setLimit(1);
			dbObjectGr.query();
			if (dbObjectGr.next()) {
				const scriptGr = new GlideRecordSecure('sys_rte_eb_script_operation');
				scriptGr.addQuery('sys_id', '97fdb21397db71103c2d3f56f053af8c');
				scriptGr.setLimit(1);
				scriptGr.query();
				if (scriptGr.next()) {
					// Strange Bug with GlideRecordSecure: .toString() and .getValue('sys_scope')
					// don't seem to work in some situations (maybe because of KMF tables?)
					scriptGr.sys_scope = dbObjectGr.sys_scope + '';
					// Note: Building an encoded query is required to prevent db-error to occurr (it is unknown why this happens!)
					scriptGr.script = `
						(function (table, additionalFilter, fields, term, allScopes, scope, matchClass) {
							var anyGr = new GlideRecord(table);
							fields = fields.filter(function (f) {
								return anyGr.isValidField(f);
							});
							
							if (additionalFilter) {
								anyGr.addEncodedQuery(additionalFilter);
							}
							
							var qc = anyGr.addQuery("sys_id", term);
							fields.forEach(function (f) {
								qc.addOrCondition(f, "CONTAINS", term);
							});

							if (!allScopes && anyGr.isValidField("sys_scope") && scope) {
								anyGr.addQuery("sys_scope", scope).addOrCondition("sys_scope.scope", scope);
							}

							if (anyGr.isValidField("sys_class_name")) {
								if (matchClass) {
									anyGr.addQuery("sys_class_name", table);
								}

								anyGr.orderBy("sys_class_name");
							}

							if (anyGr.isValidField("sys_name")) {
								anyGr.orderBy("sys_name");
							}

							anyGr.query();

							var result = {
								recordType: table,
								tableLabel: anyGr.getLabel(),
								hits: []
							};

							while (anyGr.next()) {
								var matches = getMatches(anyGr, fields, term);
								if (matches.length) {
									var gdt = new GlideDateTime();
									gdt.setValue(anyGr.getValue("sys_updated_on"));
									result.hits.push({
										name: anyGr.getDisplayValue() || anyGr.getUniqueValue(),
										className: anyGr.getRecordClassName(),
										tableLabel: anyGr.getTableName(),
										matches: matches,
										sysId: anyGr.getUniqueValue(),
										modified: gdt.getNumericValue()
									});
								}
							}

							return result;

							function getMatches(anyGr, fields, term) {
								var matches = [];
								fields.forEach(function (field) {
									try {
										var match = {
											field: field,
											fieldLabel: anyGr.getElement(field).getLabel(),
											lineMatches: [],
											count : 0
										};

										var text = anyGr.getValue(field);
										if (text && hasTerm(text, term)) {
											match.count = countTerm(text, term);
											match.lineMatches = getMatchingLines(text, term);
										}

										if (match.lineMatches.length > 0) {
											matches.push(match);
										}
									} catch (e) {
										// Unable to read field. This is usually an ACL error and not a real problem
									}
								});

								return matches;
							}

							function countTerm(text, term) {
								if (!term) {
									return 0;
								}

								term = escapeSpecial(term);
								return text.match(new RegExp(term, "gi")).length;
							}

							function escapeSpecial(text) {
								return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, "\\\\$&");
							}

							function getMatchingLines(text, term) {
								var lineMatches = [];
								var scanProgress = 0;
								var lines = text.split(/\\r\\n|\\r|\\n/g);
								for (var j = 0; j < lines.length; j++) {
									var line = lines[j];
									if (hasTerm(line, term)) {
										if (j > 0 && j > scanProgress + 1) {
											lineMatches.push({line: (j), context: lines[j - 1], escaped: encodeURIComponent(lines[j - 1])});
										}

										lineMatches.push({line: (j + 1), context: line, escaped: encodeURIComponent(line)});

										if (j < lines.length - 1) {
											lineMatches.push({line: (j + 2), context: lines[j + 1], escaped: encodeURIComponent(lines[++j])});
										}

										scanProgress = j;
									}
								}

								return lineMatches;
							}

							function hasTerm(text, term) {
								if (!text || !term)
									return false;

								return (text.toLowerCase().indexOf(term.toLowerCase()) > -1);
							}
						})(table, additionalFilter, fields.split(','), term, allScopes, scope, matchClass);
					`;
					
					const searchStart = new GlideDateTime();
					result.search_result = new GlideScopedEvaluator().evaluateScript(scriptGr, 'script', { 
						table: table,
						additionalFilter: additionalFilter,
						fields: fields.join(','),
						term: term,
						allScopes: allScopes,
						scope: scope,
						matchClass: config.matchClass == true
					});
					const searchEnd = new GlideDateTime();

					if (result.search_result) {					
						result.status = 'success';
					} else {
						const logGr = new GlideRecordSecure('syslog');
						logGr.addQuery('source', 'Evaluator');
						logGr.addQuery('sys_created_by', gs.getUserName());
						logGr.addQuery('sys_created_on', '<=', searchEnd);
						logGr.addQuery('sys_created_on', '>=', searchStart);
						result.message = 'Failed to execute the search script: ' 
							+ '<a href="/nav_to.do?uri=%2Fsyslog_list.do%3Fsysparm_query%3D'
							+ encodeURIComponent(logGr.getEncodedQuery())
							+ '" target="_blank">Logs</a>';
					}
				} else {
					result.message = 'Unable to run script';
				}
			} else {
				result.message = 'Unable to find table';
			}
		} else {
			result.message = 'Invalid parameters!';
		}
		
		return JSON.stringify(result);
	},
	
	// A query to /api/sn_codesearch/code_search/tables will crash when there is a table
	// in the search group which doesn't exist on the instance.
	// Because DevOps+ is shipped with many tables which might not exist on the current instance,
	// this function replicates the ootb function.
	// In addition, the ServiceNow Dev Team for Code Search marked the "cannot add non-application-file table to code search"
	// as "won't fix"
	getTables: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		let config = this.getParameter('config');
		if (config) {
			try {
				config = JSON.parse(config);
			} catch (e) {
				result.message = 'Invalid config!';
				return JSON.stringify(result);
			}
			
			let tables = [];			
			if (config.group) {
				const searchTableGr = new GlideRecordSecure('sn_codesearch_table');
				searchTableGr.addQuery('search_group.name', config.group);
				searchTableGr.query();
				while (searchTableGr.next()) {
					const table = searchTableGr.table.toString();
					if (gs.tableExists(table)) {
						tables.push({
							name: searchTableGr.table.toString(),
							label: searchTableGr.getDisplayValue()
						});
					}
				}
			} else if (config.all_application_files) {
				let cachedTables = sn_scoped_cache.ScopedCacheManager.get('devops_plus_code_search_tables', 'applicationFiles');
				if (cachedTables) {
					tables = JSON.parse(cachedTables);
				} else {
					// might not fit in a 'IN'-query, therefore iterate over each table individually
					new GlideTableHierarchy('sys_metadata').getTableExtensions().forEach(table => {
						const tableGr = new GlideRecordSecure('sys_db_object');
						tableGr.addQuery('name', table);
						tableGr.setLimit(1);
						tableGr.query();
						while (tableGr.next()) {
							tables.push({
								name: table,
								label: tableGr.getDisplayValue()
							});
						}
					});					
					
					sn_scoped_cache.ScopedCacheManager.put('devops_plus_code_search_tables', 'applicationFiles', JSON.stringify(tables));
				}
			} else if (config.all_tables) {
				let cachedTables = sn_scoped_cache.ScopedCacheManager.get('devops_plus_code_search_tables', 'tables');
				if (cachedTables) {
					tables = JSON.parse(cachedTables);
				} else {				
					// add all non-extendable tables
					let tableGr = new GlideRecordSecure('sys_db_object');
					tableGr.addQuery('is_extendable', false);
					tableGr.query();
					while (tableGr.next()) {
						tables.push({
							name: tableGr.getValue('name'),
							label: tableGr.getDisplayValue()
						});
					}

					// add all base tables
					tableGr = new GlideRecordSecure('sys_db_object');
					tableGr.addQuery('is_extendable', true);
					tableGr.addNullQuery('super_class');
					tableGr.query();
					while (tableGr.next()) {
						const tableName = tableGr.getValue('name');
						tables.push(tableName);

						const t = new GlideTableHierarchy(tableName).getTableExtensions();
						for (let i = 0; i < t.length; i++) {
							tables.push({
								name: t[i],
								label: ''
							});
						}
					}
					
					sn_scoped_cache.ScopedCacheManager.put('devops_plus_code_search_tables', 'tables', JSON.stringify(tables));
				}
			} else if (config.script) {
				const prefGr = new GlideRecordSecure('sys_user_preference');
				prefGr.addQuery('name', 'STARTSWITH', 'devops_code_search_script');
				prefGr.addQuery('sys_id', config.script);
				prefGr.setLimit(1);
				prefGr.query();
				if (prefGr.next()) {
					const scriptGr = new GlideRecordSecure('sys_rte_eb_script_operation');
					scriptGr.addQuery('sys_id', '97fdb21397db71103c2d3f56f053af8c');
					scriptGr.setLimit(1);
					scriptGr.query();
					if (scriptGr.next()) {
						scriptGr.sys_scope = 'global';
						scriptGr.script = prefGr.value.toString();
						const scriptTables = new GlideScopedEvaluator().evaluateScript(scriptGr, 'script', { 
							table: null
						});
						
						scriptTables.forEach(t => tables.push({
							name: t,
							label: ''
						}));
					} else {
						result.message = 'Failed to execute script';
					}
				} else {
					result.message = 'Failed to retrieve script';
				}
			}
				
			const tableGr = new GlideRecordSecure('sys_db_object');
			tableGr.addQuery('name', 'IN', tables.filter(t => !t.label).map(t => t.name));
			tableGr.query();
			while (tableGr.next()) {
				const tableName = tableGr.name.toString();
				const table = tables.find(t => t.name == tableName);
				if (table) {
					table.label = tableGr.getDisplayValue();
				}
			}
			
			// only return tables which have a label (no label = tabel doesn't exist)
			result.tables = tables.filter(t => !!t.label);
			result.status = 'success';
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},

    type: 'CodeSearchUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-07 10:12:54</sys_created_on>
        <sys_id>35fdd6d597d32110d70ef207f053afcd</sys_id>
        <sys_mod_count>97</sys_mod_count>
        <sys_name>CodeSearchUtilClient</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_35fdd6d597d32110d70ef207f053afcd</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-05-28 17:07:18</sys_updated_on>
    </sys_script_include>
</record_update>
