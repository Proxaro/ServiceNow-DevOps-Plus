<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>CodeSearchUtilClient</name>
        <script><![CDATA[/* global Class, global, GlideRecordSecure, GlideStringUtil, gs */
/* eslint no-undef: "error" */
var CodeSearchUtilClient = Class.create();
CodeSearchUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function () {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
	},
	
	getTables: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const searchGroup = this.getParameter('search_group');
		if (searchGroup) {
			const tables = [];
			const searchTableGr = new GlideRecordSecure('sn_codesearch_table');
			searchTableGr.addQuery('search_group.name', searchGroup);
			searchTableGr.query();
			while (searchTableGr.next()) {
				tables.push({
					name: searchTableGr.table.toString(),
					label: ''
				});
			}

			const tableGr = new GlideRecordSecure('sys_db_object');
			tableGr.addQuery('name', 'IN', tables.map(t => t.name));
			tableGr.query();
			while (tableGr.next()) {
				const tableName = tableGr.name.toString();
				const table = tables.find(t => t.name == tableName);
				if (table) {
					table.label = tableGr.getDisplayValue();
				}
			}
			
			// only return tables which have a label (no label = tabel doesn't exist)
			result.tables = tables.filter(t => !!t.label);
			result.status = 'success';
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},
	
	getScriptIncludeInfo: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const scriptInclude = this.getParameter('script_include');
		if (GlideStringUtil.isEligibleSysID(scriptInclude)) {
			const scriptIncludeGr = new GlideRecordSecure('sys_script_include');
			scriptIncludeGr.addQuery('sys_id', scriptInclude);
			scriptIncludeGr.setLimit(1);
			scriptIncludeGr.query();
			if (scriptIncludeGr.next()) {
				result.script_include = {
					sys_id: scriptIncludeGr.getUniqueValue(),
					name: scriptIncludeGr.getDisplayValue(),
					scope: {
						sys_id: scriptIncludeGr.getValue('sys_scope'),
						display_value: scriptIncludeGr.getDisplayValue('sys_scope')
					}
				};
				
				result.status = 'success';
			} else {
				result.message = gs.getMessage('devops_record_unauthorized_or_invalid_record');
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},

    type: 'CodeSearchUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-07 10:12:54</sys_created_on>
        <sys_id>35fdd6d597d32110d70ef207f053afcd</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>CodeSearchUtilClient</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_35fdd6d597d32110d70ef207f053afcd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-08-14 10:05:30</sys_updated_on>
    </sys_script_include>
</record_update>
