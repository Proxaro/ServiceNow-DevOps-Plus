<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.TranslateUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>TranslateUtilClient</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[/* global global, gs, sn_fd, sn_cc, sn_ws, x_424426_devops */
/* global Class, GlideRecordSecure */
/* eslint no-undef: "error" */
var TranslateUtilClient = Class.create();
TranslateUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function () {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
		this.configUtil = new x_424426_devops.ConfigUtil();
	},
	
	translate: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const message = this.getParameter('message');
		const language = this.getParameter('language');
		const context = this.getParameter('context');
		if (message && language) {
			result.status = 'success';
			
			const translatedGr = new GlideRecordSecure('sys_translated');
			translatedGr.addQuery('value', message);
			translatedGr.addQuery('language', language);
			translatedGr.setLimit(1);
			translatedGr.query();
			if (translatedGr.next()) {
				result.translated_message = translatedGr.label.toString();
				result.status = 'success';
				return JSON.stringify(result);
			}
			
			const uiMessageGr = new GlideRecordSecure('sys_ui_message');
			uiMessageGr.addQuery('key', message);
			uiMessageGr.addQuery('language', language);
			uiMessageGr.setLimit(1);
			uiMessageGr.query();
			if (uiMessageGr.next()) {
				result.translated_message = uiMessageGr.message.toString();
				result.status = 'success';
				return JSON.stringify(result);
			}
			
			const choiceGr = new GlideRecordSecure('sys_choice');
			choiceGr.addQuery('label', message);
			choiceGr.addQuery('language', language);
			choiceGr.setLimit(1);
			choiceGr.query();
			if (choiceGr.next()) {
				result.translated_message = choiceGr.label.toString();
				result.status = 'success';
				return JSON.stringify(result);
			}
			
			const docGr = new GlideRecordSecure('sys_documentation');
			docGr.addQuery('label', message);
			docGr.addQuery('language', language);
			docGr.setLimit(1);
			docGr.query();
			if (docGr.next()) {
				result.translated_message = docGr.label.toString();
				result.status = 'success';
				return JSON.stringify(result);
			}
			
			const deeplResult = this._translateDeepl(language, message, context);
			if (deeplResult.status == 'success') {
				result.status = 'success';
				result.translated_message = deeplResult.text;
			} else {
				result.message = deeplResult.message;
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},

	_translateDeepl: function (language, message, sourceLang, context) {
		const result = {
			status: 'error',
			message: ''
		};

		const credentials = new sn_cc.StandardCredentialsProvider().getCredentialByAliasID('c3096d73972f2110d70ef207f053af19');
		if (credentials) {
			const apiKey = credentials.getAttribute('api_key');
			if (apiKey) {
				const request = new sn_ws.RESTMessageV2();
				request.setHttpMethod('post');
				request.setEndpoint('https://api-free.deepl.com/v2/translate');
				request.setRequestHeader('Content-Type', 'Application/json');
				request.setRequestHeader('Accept', 'Application/json');
				request.setRequestHeader('Authorization', 'DeepL-Auth-Key ' + apiKey);
				const data = {
					'target_lang': language,
					'text': [message],
					'source_lang': sourceLang
				};
				if (context) {
					data.context = context;
				}
				request.setRequestBody(JSON.stringify(data));

				const response = request.execute();
				if (response.getStatusCode() == 200) {
					try {
						const translation = JSON.parse(response.getBody()).translations[0];
						result.sourceLanguage = translation.detected_source_language;
						result.text = translation.text;
						result.status = 'success';
					} catch (e) {
						result.message = 'Failed to parse deepl result: ' + e;
					}
				} else {
					result.message = response.getBody();
				}
			} else {
				result.message = gs.getMessage('devops_translation_no_deepl');
			}
		} else {
			result.message = gs.getMessage('devops_translation_no_deepl');
		}
			
        return result;
	},
	
	getTranslatedTextMessage: function () {
		const result = {
			status: 'error',
			message: gs.getMessage('devops_record_unauthorized_or_invalid_record')
		};
		
		const translatedTextSysID = this.getParameter('sys_id');
		if (translatedTextSysID) {
			const translatedTextGr = new GlideRecordSecure('sys_translated_text');
			translatedTextGr.addQuery('sys_id', translatedTextSysID);
			translatedTextGr.setLimit(1);
			translatedTextGr.query();
			if (translatedTextGr.next()) {
				const anyGr = translatedTextGr.documentkey.getRefRecord();
				if (anyGr.isValidRecord()) {
					const field = translatedTextGr.fieldname.toString();
					if (field && anyGr.isValidField(field)) {
						result.status = 'success';
						result.message = anyGr[field].toString();
					}
				}
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},
	
	getDocLabel: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const table = this.getParameter('table');
		const field = this.getParameter('field');
		const language = this.getParameter('language');
		if (table && field && language) {
			const choiceGr = new GlideRecordSecure('sys_documentation');
			if (table.startsWith('var__')) {
				choiceGr.addQuery('name', 'CONTAINS', table);
			} else {
				choiceGr.addQuery('name', table);
			}
			
			if (field) {
				choiceGr.addQuery('element', field);
			} else {
				// table label
				choiceGr.addNullQuery('element');
			}

			choiceGr.addNotNullQuery('label');
			choiceGr.addQuery('language', language);
			choiceGr.setLimit(1);
			choiceGr.query();
			if (choiceGr.next()) {
				result.label = choiceGr.label.toString();
				result.status = 'success';
			} else {
				result.message = gs.getMessage('devops_translate_field_label_not_found', [language]);
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},
	
	getChoiceLabel: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const table = this.getParameter('table');
		const field = this.getParameter('field');
		const value = this.getParameter('value');
		const language = this.getParameter('language');
		if (table && field && value && language) {
			const filters = [{ 
				field: 'name',
				value: table 
			}, { 
				field: 'element',
				value: field
			}];
			while (filters.length) {
				const choiceGr = new GlideRecordSecure('sys_choice');
				filters.forEach(f => {
					choiceGr.addQuery(f.field, f.value);
				});
				choiceGr.addNotNullQuery('label');
				choiceGr.addQuery('value', value);
				choiceGr.addQuery('language', language);
				choiceGr.setLimit(1);
				choiceGr.query();
				if (choiceGr.next()) {
					result.label = choiceGr.label.toString();
					result.status = 'success';
					break;
				} else {
					filters.shift();
				}
			}
			
			if (filters.length == 0) {
				result.message = gs.getMessage('devops_translate_choice_not_found', [value, language]);
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},
	
	getCatalogFieldData: function () {
		const result = {
			status: 'error',
			message: ''
		};

		const fieldSysID = this.getParameter('field');
		if (fieldSysID) {
			const itemOptionGr = new GlideRecordSecure('item_option_new');
			itemOptionGr.addQuery('sys_id', fieldSysID);
			itemOptionGr.setLimit(1);
			itemOptionGr.query();
			if (itemOptionGr.next()) {
				result.table = 'sys_translated';
				result.query = 'name=question^element=question_text^value=' + itemOptionGr.question_text;
				result.status = 'success';
			} else {
				const variableSetGr = new GlideRecordSecure('item_option_new_set');
				variableSetGr.addQuery('sys_id', fieldSysID);
				variableSetGr.setLimit(1);
				variableSetGr.query();
				if (variableSetGr.next()) {
					result.table = 'sys_translated';
					result.query = 'name=item_option_new_set^element=title^value=' + variableSetGr.title;
					result.status = 'success';
				} else {
					result.message = gs.getMessage('devops_record_unauthorized_or_invalid_record');
				}
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},
	
    type: 'TranslateUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-27 10:54:43</sys_created_on>
        <sys_id>39672dbf97eb2110d70ef207f053af5f</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>TranslateUtilClient</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_39672dbf97eb2110d70ef207f053af5f</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-10 16:28:44</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>39672dbf97eb2110d70ef207f053af5f</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-10 16:28:43</sys_created_on>
        <sys_id>2512c06d837556100971c810feaad33f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-10 16:28:43</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
