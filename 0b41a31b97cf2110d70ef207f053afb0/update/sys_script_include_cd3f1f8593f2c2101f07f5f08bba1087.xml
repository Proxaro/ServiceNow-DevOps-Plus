<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchHandlerWorkflow</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_424426_devops.CodeSearchHandler</description>
        <name>CodeSearchHandlerWorkflow</name>
        <script><![CDATA[/* global global, gs, x_424426_devops */
/* global Class, GlideRecordSecure, GlideStringUtil */
/* eslint no-undef: "error" */
var CodeSearchHandlerWorkflow = Class.create();
CodeSearchHandlerWorkflow.prototype = Object.extendsObject(x_424426_devops.CodeSearchHandlerBase, {
    initialize: function() {
		x_424426_devops.CodeSearchHandlerBase.prototype.initialize.apply(this, arguments);
    },

     handlesScope: function (scopeName) {
		return scopeName == 'global';
	},

	handlesTable: function (tableName) {
		return tableName == 'wf_workflow';
	},

	// context.{table|fields|term|additional_filter|scope|match_class|limit}
	// => result.{tableLabel|hits}
	// => result.hits{name|className|matches[]|sysId}
	// => result.hits.matches[].{line|context}
	search: function(table, context) {
        const fields = context.all_fields ? this.getFields(table) : context.fields;
        const term = GlideStringUtil.escapeQueryTermSeparator(context.term);
		let query = [];
		if (context.additional_filter)
			query.push(context.additional_filter);

		if (context.scope)
			query.push('sys_scope=' + context.scope);

		if (context.match_table)
			query.push('sys_class_name=' + table);

		const workflowGr = new GlideRecordSecure('wf_workflow');
		if (query.length)
			workflowGr.addEncodedQuery(query.join('^'));

		if (fields.length)
			workflowGr.addEncodedQuery(fields.map(f => f + 'LIKE' + term).join('^OR'));
		
		// related search must not contain the field conditions the term might be present in the fields but in the related records
		if (context.search_related && query.length)
			workflowGr.addEncodedQuery('^NQ' + query.join('^'));

		workflowGr.orderBy('sys_class_name');
		workflowGr.orderBy('sys_name');

		if (context.limit) {
			workflowGr.setLimit(context.limit);
		}

		workflowGr.query();

		const result = {
			tableLabel: workflowGr.getLabel(),
			hits: []
		};

		while (workflowGr.next()) {
			const hit = {
				name: workflowGr.getDisplayValue() || workflowGr.getUniqueValue(),
				className: workflowGr.getRecordClassName(),
				matches: this.getMatches(workflowGr, fields, context.term),
				sysId: workflowGr.getUniqueValue()
			};

			if (context.search_related) {
				const wfVersionGr = new GlideRecordSecure('wf_workflow_version');
				wfVersionGr.addQuery('workflow', workflowGr.sys_id);
				wfVersionGr.orderBy('order');
				wfVersionGr.query();
				while (wfVersionGr.next()) {
					const wfActivityGr = new GlideRecordSecure('wf_activity');
					wfActivityGr.addQuery('workflow_version', wfVersionGr.sys_id);
					wfActivityGr.query();
					while (wfActivityGr.next()) {
						const variableGr = new GlideRecordSecure('sys_variable_value');
						variableGr.addQuery('document', 'wf_activity');
						variableGr.addQuery('document_key', wfActivityGr.sys_id);
						variableGr.addQuery('value', 'CONTAINS', context.term);
						variableGr.query();
						while (variableGr.next()) {
							hit.matches = hit.matches.concat(
								this.getMatches(variableGr, ['value'], context.term)
							);
						}
					}
				}
			}

			if (hit.matches.length) {
				result.hits.push(hit);
			}
		}

		return result;
    },

    type: 'CodeSearchHandlerWorkflow'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-13 16:09:28</sys_created_on>
        <sys_id>cd3f1f8593f2c2101f07f5f08bba1087</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>CodeSearchHandlerWorkflow</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_cd3f1f8593f2c2101f07f5f08bba1087</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-06-13 16:45:02</sys_updated_on>
    </sys_script_include>
</record_update>
