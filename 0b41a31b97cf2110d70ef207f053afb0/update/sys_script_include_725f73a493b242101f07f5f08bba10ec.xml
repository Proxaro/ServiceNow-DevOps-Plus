<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchHandlerBase</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>CodeSearchHandlerBase</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var CodeSearchHandlerBase = Class.create();
CodeSearchHandlerBase.prototype = {	
	initialize: function() {
		this.max_context_length = 500;
	},

	/**
	 * get all searchable fields for the given table
	 * note: the result is cached
	 * @param {string} table - the table name
	 * @return {Object<string, {name: string, table: string, type: string, label: string, reference: string}>}
	 */
	getFields: function (table) {
		let cachedFields = sn_scoped_cache.ScopedCacheManager.get('devops_plus_code_search_columns', table);
		if (cachedFields) {
			if (cachedFields.startsWith('{')) {
				// DevOps+ > 1.2.3 stores the field info!
				// by checking for an actual object, we ensure that 1.2.3-caches get updated
				return JSON.parse(cachedFields);
			}
		}
		
		const fields = {};
		const dictionaryGr = new GlideRecordSecure('sys_dictionary');
		dictionaryGr.addQuery('name', 'IN', new GlideTableHierarchy(table).getTables());
		dictionaryGr.addQuery('internal_type.scalar_type', 'string');
		dictionaryGr.addQuery('internal_type.name', '!=', 'collection');
		dictionaryGr.addQuery('internal_type.name', '!=', 'glide_var');
		dictionaryGr.query();
		while (dictionaryGr.next()) {
			const name = dictionaryGr.element.toString();
			fields[name] = {
				name: name,
				table: dictionaryGr.name.toString(),
				type: dictionaryGr.internal_type.name.toString(),
				reference: dictionaryGr.reference.toString(),
				max_length: +dictionaryGr.max_length
			};
		}
		
		sn_scoped_cache.ScopedCacheManager.put('devops_plus_code_search_columns', table, JSON.stringify(fields));
		return fields;
	},
	
	/**
	 * get all matches of the supplied search term
	 * @param {GlideRecordGenerated} anyGr
	 * @param {Object<string, {}} fields
	 * @param {string} term
	 * @return {{fieldLabel: string, lineMatches: {line: number, context: string}[]}[]}
	 */
	getMatches: function (anyGr, fields, term) {
		const matches = [];
		for (const field in fields) {
			const element = anyGr.getElement(field);
			if (element) {
				const match = {
					fieldLabel: element.getLabel(),
					lineMatches: this.getMatchingLines(element.toString(), term)
				};

				match.lineMatches.forEach(lineMatch => {
					if (lineMatch.context.length > this.max_context_length) {
						lineMatch.context = lineMatch.context.substring(0, this.max_context_length) + '...';
					}
				});

				if (match.lineMatches.length) {
					matches.push(match);
				}
			}
		}

		return matches;
	},
	
	/**
	 * get matching lines of the supplied term within the supplied text
	 * @param {string} text
	 * @param {string} term
	 * @return {{line: number, context: string}[]}
	 */
	getMatchingLines: function (text, term) {
		const lineMatches = [];
		let scanProgress = 0;
		const lines = text.split(/\r\n|\r|\n/g);
		for (let j = 0; j < lines.length; j++) {
			const line = lines[j];
			if (line.toLowerCase().includes(term.toLowerCase())) {
				if (j > 0 && j > scanProgress + 1) {
					lineMatches.push({line: (j), context: lines[j - 1]});
				}

				lineMatches.push({line: (j + 1), context: line});

				if (j < lines.length - 1) {
					lineMatches.push({line: (j + 2), context: lines[j + 1]});
				}

				scanProgress = j;
			}
		}

		return lineMatches;
	},

	type: 'CodeSearchHandlerBase'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-12 05:14:02</sys_created_on>
        <sys_id>725f73a493b242101f07f5f08bba10ec</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>CodeSearchHandlerBase</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_725f73a493b242101f07f5f08bba10ec</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-07 12:59:27</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>725f73a493b242101f07f5f08bba10ec</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-07 11:30:34</sys_created_on>
        <sys_id>81112b9483bdd2900971c810feaad3a8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-07 11:30:34</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
