<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchHandlerGeneral</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_424426_devops.CodeSearchHandler</description>
        <name>CodeSearchHandlerGeneral</name>
        <script><![CDATA[/* global global, gs, x_424426_devops */
/* global Class, GlideRecordSecure, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var CodeSearchHandlerGeneral = Class.create();
CodeSearchHandlerGeneral.prototype = Object.extendsObject(x_424426_devops.CodeSearchHandlerBase, {
    initialize: function() {
		x_424426_devops.CodeSearchHandlerBase.prototype.initialize.apply(this, arguments);
    },

	/**
	 * test if this extension point can handle the given scope
	 * @param {string} scopeName
	 * @return {boolean}
	 */
    handlesScope: function (scopeName) {
		return true;
	},

	/**
	 * test if this extensionpoint can handle the given table
	 * @param {string} tableName
	 * @return {boolean}
	 */
	handlesTable: function (tableName) {
		return true;
	},

	/**
	 * @typedef {CodeSearchContext}
	 * @property {string} term - the search term
	 * @property {Array.<string>} [fields] - if all_fields is not set contains the list of fields to be searched
	 * @property {boolean} [all_fields] - wether all fields shoud be searched
	 * @property {string} [additional_filter] - encoded query which should be added on top of the search query
	 * @property {string} [scope] - limit search to the supplied scope
	 * @property {boolean} [match_table] - match sys_class_name aka do not search extending tables
	 * @property {number} limit - search limit
	 */
	/**
	 * @typedef {CodeSearchHit}
	 * @property {string} name
	 * @property {string} className
	 * @property {Array.<CodeSearchMatch>} matches
	 * @property {string} sysId
	 */
	/**
	 * @typedef {CodeSearchResult}
	 * @property {string} tableLabel
	 * @property {Array.<CodeSearchHit>} hits
	 */
	/**
	 * search in the supplied table using the (fixed) context
	 * @param {string} table
	 * @param {CodeSearchContext} context
	 * @return {CodeSearchResult}
	 */
	search: function(table, context) {
		const dbObjectGr = new GlideRecordSecure('sys_db_object');
		dbObjectGr.addQuery('name', table);
		dbObjectGr.setLimit(1);
		dbObjectGr.query();
		if (dbObjectGr.next()) {
			const scriptGr = new GlideRecordSecure('sys_rte_eb_script_operation');
			scriptGr.addQuery('sys_id', '97fdb21397db71103c2d3f56f053af8c');
			scriptGr.setLimit(1);
			scriptGr.query();
			if (scriptGr.next()) {
				scriptGr.sys_scope = dbObjectGr.sys_scope.toString();
				scriptGr.script = `
				(function (table, context) {
					var term = GlideStringUtil.escapeQueryTermSeparator(context.term);
					var query = 'sys_id=' + term;
					var fields = context.all_fields ? this.getFields(table) : context.fields;
					fields.forEach(function (f) {
						query += '^OR' + f + 'LIKE' + term;
					});

					var anyGr = new GlideRecordSecure(table);
					if (context.additional_filter) {
						anyGr.addEncodedQuery(context.additional_filter);
					}
					
					anyGr.addEncodedQuery(query);

					if (context.scope && anyGr.isValidField('sys_scope')) {
						anyGr.addQuery('sys_scope', context.scope);
					}

					if (anyGr.isValidField('sys_class_name')) {
						if (context.match_table) {
							anyGr.addQuery('sys_class_name', table);
						}

						anyGr.orderBy('sys_class_name');
					}

					if (anyGr.isValidField('sys_name')) {
						anyGr.orderBy('sys_name');
					}

					if (context.limit) {
						anyGr.setLimit(context.limit);
					}

					anyGr.query();

					var result = {
						tableLabel: anyGr.getLabel(),
						hits: []
					};

					while (anyGr.next()) {
						var matches = this.getMatches(anyGr, fields, context.term);
						if (matches.length) {
							result.hits.push({
								name: anyGr.getDisplayValue() || anyGr.getUniqueValue(),
								className: anyGr.getRecordClassName(),
								matches: matches,
								sysId: anyGr.getUniqueValue()
							});
						}
					}

					return result;
				}).call(self, table, JSON.parse(context));`;

				const gse = new GlideScopedEvaluator();
				gse.putVariable('table', table);
				gse.putVariable('context', JSON.stringify(context));
				gse.putVariable('self', this);
				return gse.evaluateScript(scriptGr, 'script');
			}
		}
    },

    type: 'CodeSearchHandlerGeneral'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-12 14:24:37</sys_created_on>
        <sys_id>6f9dbdf093fa42101f07f5f08bba1059</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>CodeSearchHandlerGeneral</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_6f9dbdf093fa42101f07f5f08bba1059</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-07-06 19:18:08</sys_updated_on>
    </sys_script_include>
</record_update>
