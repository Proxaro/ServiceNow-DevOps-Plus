<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.DecryptUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>DecryptUtilClient</name>
        <script><![CDATA[/* global global, gs, x_424426_devops, GlideTableHierarchy */
/* global Class, GlideRecordSecure */
/* eslint no-undef: "error" */
var DecryptUtilClient = Class.create();
DecryptUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function(request, responseXML, gc) {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
	},
	
	getMetadataInfo: function () {
		const result = {
			status: 'error',
			message: ''
		};
		try {
		const metadata = this.getParameter('metadata');
		if (metadata) {
			const metadataGr = new GlideRecordSecure('sys_metadata');
			metadataGr.addQuery('sys_id', metadata);
			metadataGr.setLimit(1);
			metadataGr.query();
			if (metadataGr.next()) {
				const table = metadataGr.getRecordClassName();				
				const tables = new GlideTableHierarchy(table).getTables();
				const dictionaryGr = new GlideRecordSecure('sys_dictionary');
				dictionaryGr.addQuery('name', 'IN', tables);
				dictionaryGr.addQuery('internal_type.name', 'CONTAINS', 'script')
					.addOrCondition('internal_type', 'xml');
				dictionaryGr.query();

				const fields = [];
				while (dictionaryGr.next()) {
					fields.push({
						name: dictionaryGr.element.toString(),
						label: dictionaryGr.getDisplayValue()
					});
				}
				
				result.table = table;
				result.scope = metadataGr.getValue('sys_scope');
				result.decryptable_fields = fields;
				result.status = 'success';
			} else {
				result.message = gs.getMessage('devops_record_unauthorized_or_invalid_record');
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		} catch (e) {
			result.status = 'error';
			result.message = e.message + '\n';
			if (e.stack) {
				result.message += e.stack;
			}
		}
		
		return JSON.stringify(result);
	},

    type: 'DecryptUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2023-11-24 21:33:13</sys_created_on>
        <sys_id>a477d8dc977631503c2d3f56f053af43</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>DecryptUtilClient</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_a477d8dc977631503c2d3f56f053af43</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2023-12-13 06:31:33</sys_updated_on>
    </sys_script_include>
</record_update>
