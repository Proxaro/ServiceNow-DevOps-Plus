<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.ContextMenuUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>ContextMenuUtilClient</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[/* global global, gs */
/* global Class, GlideRecordSecure, GlideTableHierarchy, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var ContextMenuUtilClient = Class.create();
ContextMenuUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function () {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
	},

	getAttributes: function () {
		const result = {
			status: 'error',
			message: ''
		};

		const table = this.getParameter('table');
		let elements = this.getParameter('elements');
		if (table && gs.tableExists(table) && elements) {
			try {
				elements = JSON.parse(elements);
				for (const name in elements) {
					if (!(elements[name] instanceof Array)) {
						throw new Error();
					}
				}
			} catch (e) {
				result.message = 'Invalid element config: Map<String, Array> expected';
				return JSON.stringify(result);
			}

			const scriptGr = new GlideRecordSecure('clone_cleanup_script');
			scriptGr.addQuery('sys_scope', 'global');
			scriptGr.setLimit(1);
			scriptGr.query();
			if (scriptGr.next()) {
				scriptGr.script = `
					(function (table, elements) {
						var attributes = {};
						var anyGr = new GlideRecordSecure(table);
						for (var name in elements) {
							var element = anyGr.getElement(name);
							if (element != null) {
								attributes[name] = {};
								elements[name].forEach(function (attr) {
									attributes[name][attr] = element.getAttribute(attr);
								});
							}
						}

						return JSON.stringify(attributes);
					})(table, JSON.parse(elements));`;
				
				result.attributes = JSON.parse(new GlideScopedEvaluator().evaluateScript(scriptGr, 'script', { 
					table: table,
					elements: JSON.stringify(elements)
				}));

				if (result.attributes) {
					result.status = 'success';
				} else {
					result.message = 'Failed to gather field attributes';
				}
			} else {
				result.message = 'Script execution not possible!';
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		

		return JSON.stringify(result);
	},
	
	getReferencingTables: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const table = this.getParameter('table');
		if (table && gs.tableExists(table)) {
			const queries = {};
			const tables = new GlideTableHierarchy(table).getTables();
			tables.forEach(tableName => {
				const dictionaryGr = new GlideRecordSecure('sys_dictionary');
				dictionaryGr.addQuery('internal_type', 'reference');
				dictionaryGr.addQuery('reference', tableName);
				dictionaryGr.query();
				while (dictionaryGr.next()) {
					const columnTable = dictionaryGr.getValue('name');
					const queryParts = queries[columnTable] || (queries[columnTable] = []);
					queryParts.push(dictionaryGr.getValue('element'));
				}
			});
			
			result.referencing = queries;
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},
	
	getChoiceValues: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const table = this.getParameter('table');
		const field = this.getParameter('field');
		if (table && gs.tableExists(table) && field) {
			const scriptGr = new GlideRecordSecure('clone_cleanup_script');
			scriptGr.addQuery('sys_scope', 'global');
			scriptGr.setLimit(1);
			scriptGr.query();
			if (scriptGr.next()) {
				scriptGr.script = `
					(function () {
						var choices = [];
						var choiceGr = new GlideSysChoice(table, field).getChoices();
						while (choiceGr && choiceGr.next()) {
							choices.push({
								value: choiceGr.getValue("value"),
								label: choiceGr.getDisplayValue("label")
							});
						}

						return choices;
					})();`;
				
				result.choices = new GlideScopedEvaluator().evaluateScript(scriptGr, 'script', { 
					table: table,
					field: field
				});

				result.status = 'success';
			} else {
				result.message = 'Script execution not possible!';
			}
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},
	
	normalizeVariable: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		let table = this.getParameter('table');
		if (table && gs.tableExists(table)) {
			if (table.startsWith('u_') || table.startsWith('sys_') || table.startsWith('cmdb_')) {
				table = table.substr(table.indexOf('_') + 1);
			} else {
				const dbObjectGr = new GlideRecordSecure('sys_db_object');
				dbObjectGr.addQuery('name', table);
				dbObjectGr.setLimit(1);
				dbObjectGr.query();
				if (dbObjectGr.next()) {
					const scopeIdentifier = dbObjectGr.sys_scope.scope.toString();
					if (table.startsWith(scopeIdentifier)) {
						// strip [SCOPE]_ from table
						// e.g. table = [x_424426_devops_]context_menu_item => context_menu_item
						table = table.substr(scopeIdentifier.length + 1);
					}
				}
			}
			
			result.variable_name = table.split('_').reduce((s, c) => 
				s + (c.charAt(0).toUpperCase() + c.slice(1))
			);
			result.status = 'success';
		} else {
			result.message = gs.getMessage('devops_invalid_parameters');
		}
		
		return JSON.stringify(result);
	},

    type: 'ContextMenuUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-13 10:56:29</sys_created_on>
        <sys_id>b78a5da897a231103c2d3f56f053af17</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>ContextMenuUtilClient</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_b78a5da897a231103c2d3f56f053af17</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-07 13:20:52</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>b78a5da897a231103c2d3f56f053af17</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-07 13:13:34</sys_created_on>
        <sys_id>bda83f1883f516900971c810feaad346</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-07 13:13:34</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
