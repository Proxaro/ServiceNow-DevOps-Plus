<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_424426_devops.context_menu</name>
        <script><![CDATA[var x_424426_devops = x_424426_devops || {};
x_424426_devops.context_menu = (function() {
	"use strict";

	/* global GwtContextMenu, Promise, console, g_form */
	/* eslint no-undef: "error" */
	/* eslint sn-no-async-await: "off" */
	if (x_424426_devops.context_menu) {
		return x_424426_devops.context_menu;
	}

	let bcm = null; // breadcrumb context menu
	let $window, $config;	
	x_424426_devops.loader.get('window', function (_window) {
		inject($window = _window, $config);

		const ootbContextMenu = $window.GwtContextMenu;
		const DevOpsContextMenuPrototype = {
			initialize: function (id) {
				if (id == 'context_breadcrumb_menu') {
					bcm = this;
				}

				return ootbContextMenu.prototype.initialize.apply(this, arguments);
			},

			execute: function (e) {
				if (this.devops_context) {
					this.devops_context.event = e;
				}
				
				return ootbContextMenu.prototype.execute.apply(this, arguments);
			},

			type: 'DevopsContextMenu'
		};

		// we need to know the timestamp of the last added item so we can ensure that the DevOps Menu appears on the bottom
		Object.keys(ootbContextMenu.prototype).filter(key => key.startsWith('add')).forEach(key => {
			DevOpsContextMenuPrototype[key] = function () {
				this.devops_lastAdded = new Date().getTime();
				return ootbContextMenu.prototype[key].apply(this, arguments);
			};
		});
		$window.GwtContextMenu = $window.Class.create(ootbContextMenu, DevOpsContextMenuPrototype);
	});

	x_424426_devops.loader.get('config', function (_config) {
		inject($window, $config = _config);
	});

	return {
		type: 'context_menu'
	};

	function inject($window, $config) {
		if ($window && $config) {			
			injectHeaderMenu($window, $config);
			injectFieldContextMenu($window, $config);
			injectBreadCrumbsMenu($window, $config);
		}
	}

	function injectFieldContextMenu($window, $config) {
		if (!$config.fieldItems) {
			return;
		}

		//$window.document.on('contextmenu', 'div[data-type="label"], div[type*="script"], div[id^="label"]', function (evt, element) {
		$window.document.on('contextmenu', 'div[id^="label"]', function (evt, element) {
			const id = element.id;
			let fieldName = id;
			if ($window.g_form) {
				const tableName = $window.g_form.getTableName();
				if (tableName == 'ni') {
					// Service Catalog
					const variableSysID = fieldName.split(':')[1];
					fieldName = $window.g_form.resolvePrettyNameMap('IO:' + variableSysID);
				} else {
					fieldName = id.substring(id.indexOf(tableName) + tableName.length + 1);
				}
			}

			// if this callback is registered before the OOTB callback which creates the context menu,
			// either the context menu variable (window.gcm) isn't created at all or it is created in 
			// the next browser tick - by using setTimeout, we make sure that this callback
			// is executed *after* the ootb handler (which initializes the gcm variable)
			$window.setTimeout(function () {
				if ($window.gcm && $window.document.getElementById($window.gcm.getID())) {
					var $context = {
						FIELD: fieldName,
						window: $window,
						g_form: g_form
					};
					
					buildMenu($window.gcm, 'devops_field_menu', $config.fieldItems, $context);
				}
			});
		});
	}

	function injectBreadCrumbsMenu($window, $config) {
		// breadcrumbs created after this scripts will be injected by the MutationObserver
		var observer = new $window.MutationObserver(function (mutations) {
			for (var i = 0; i < mutations.length; i++) {
				var mutation = mutations[i];
				if (mutation.addedNodes) {
					for (var j = 0; j < mutation.addedNodes.length; j++) {
						var node = mutation.addedNodes[j];
						if (node.classList && node.classList.contains('breadcrumb_link')) {
							injectBreadCrumbContextMenu(node);
						}
					}
				}
			}   
		});

		observer.observe($window.document, {
			childList: true,
			subtree: true
		});

		// breadcrumbs already existing when this script runs will be injected by the querySelectorAll
		$window.document.querySelectorAll('.breadcrumb_link').forEach(function (element) {
			injectBreadCrumbContextMenu(element);
		});

		function injectBreadCrumbContextMenu(element) {
			if (!$config.breadcrumbItems) {
				return;
			}

			element.addEventListener('contextmenu', function () {
				var listID = element.closest('span.breadcrumb_container').getAttribute('list_id');
				var filter = getFilter(element);
				// need to wait for the context menu will be build which happens after this cycle
				$window.setTimeout(function () {
					if (bcm && $window.document.getElementById(bcm.getID())) {
						var $context = {
							window: $window,
							g_form: g_form,
							LISTID: listID,
							FILTER: filter
						};
						
						buildMenu(bcm, 'devops_breadcrumbs_menu', $config.breadcrumbItems, $context);
					}
				});
			});
		}

		function getFilter(element) {
			while (element && !element.hasAttribute('filter')) {
				element = element.parentElement;
			}

			return (element && element.getAttribute('filter')) || '';
		}
	}

	function injectHeaderMenu($window, $config) {
		if (!$config.headerItems) {
			return;
		}

		var headerMenu = $window.gcmSection || $window.headerGCM;
		if (headerMenu) {
			addHeaderMenuItems($window, $config, headerMenu);
		} else {
			Object.defineProperty($window, 'gcmSection', {
				configurable: true,
				set: function (v) {
					Object.defineProperty($window, 'gcmSection', {
						configurable: true, enumerable: true, writable: true, value: v
					});
					
					// right after setting the value, the menu gets .clear()-ed
					// => the DevOps+ menu building needs to be postponed slightly
					$window.setTimeout(function () {
						addHeaderMenuItems($window, $config, v);
					});
				}
			});

			Object.defineProperty($window, 'headerGCM', {
				configurable: true,
				set: function (v) {
					Object.defineProperty($window, 'headerGCM', {
						configurable: true, enumerable: true, writable: true, value: v 
					});

					// right after setting the value, the menu gets .clear()-ed
					// the DevOps+ menu building needs to be postponed slightly
					$window.setTimeout(function () {
						addHeaderMenuItems($window, $config, v);
					});
				}
			});
		}

		function addHeaderMenuItems($window, $config, headerMenu) {
			// by this time the g_form should have already loaded...
			if (!$window.g_form) {
				return;
			}

			const $context = {
				window: $window,
				g_form: g_form
			};

			buildMenu($window.gcm, 'devops_header_menu', $config.headerItems, $context);
		}
	}

	async function buildMenu(parentMenu, menuName, items, context) {
		let itemsAdded = 0;

		const devopsMenu = new GwtContextMenu(menuName);
		devopsMenu.clear();
		devopsMenu.devops_context = context;

		for (const item of items) {				
			const conditionScript = item.condition_script;
			if (conditionScript) {
				try {
					if (!await new $window.Function('script', '$context', 'return eval(script)')(conditionScript, context)) {
						continue;
					}
				} catch (e) {
					$window.console.error('[DevOps+] Failed to add item for (' + menuName + ')', item, context, e);
					continue;
				}
			}

			if (item.item_type == '' || item.item_type == 'link') {
				devopsMenu.addFunc(item.label, function () {
					new Function('script', '$context', 'return eval(script)')(item.script, context);
				});	
			} else if (item.item_type == 'menu') {
				try {
					const menu = await new Function('script', '$context', 'return eval(script)')(item.script, context);
					if (menu) {
						menu.devops_context = context;
						devopsMenu.addMenu(
							item.label,
							menu
						);
					}
				} catch (e) {
					$window.console.error('[DevOps+] Failed to add menu for (' + menuName + ')', item, context, e);
				}
			} else {
				continue;
			}

			itemsAdded++;
		}

		if (itemsAdded) {
			// add the DevOps menu after the OOTB menu(s) have been fully built
			while (new Date().getTime() - parentMenu.devops_lastAdded < 25) {
				await new Promise(r => $window.setTimeout(r, 25));
			}

			parentMenu.addLine();
			parentMenu.addMenu('DevOps+', devopsMenu);
		}
	}
})();
]]></script>
        <script_name>context_menu</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-06 18:59:03</sys_created_on>
        <sys_id>7b24430d97d32110d70ef207f053af66</sys_id>
        <sys_mod_count>115</sys_mod_count>
        <sys_name>x_424426_devops.context_menu</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_ui_script_7b24430d97d32110d70ef207f053af66</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-07-29 21:06:12</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
