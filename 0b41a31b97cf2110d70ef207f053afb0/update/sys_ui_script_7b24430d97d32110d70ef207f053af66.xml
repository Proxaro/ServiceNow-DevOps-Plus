<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_424426_devops.context_menu</name>
        <script><![CDATA[var x_424426_devops = x_424426_devops || {};
x_424426_devops.context_menu = (function() {
	"use strict";
	
	/* global MutationObserver */
	/* eslint no-undef: "error" */
	if (x_424426_devops.context_menu) {
		return x_424426_devops.context_menu;
	}
	
	var $window, $config;	
	x_424426_devops.loader.get('window', function (_window) {
		inject($window = _window, $config);
	});
	
	x_424426_devops.loader.get('config', function (_config) {
		inject($window, $config = _config);
	});

	return {
		type: 'context_menu'
	};
	
	function inject($window, $config) {
		if ($window && $config) {
			injectHeaderMenu($window, $config);
			injectFieldContextMenu($window, $config);
		}
	}
	
	function injectFieldContextMenu($window, $config) {
		//$window.document.on('contextmenu', 'div[data-type="label"], div[type*="script"], div[id^="label"]', function (evt, element) {
		$window.document.on('contextmenu', 'div[id^="label"]', function (evt, element) {
			var id = element.id;
			var fieldName = id;
			if ($window.g_form) {
				var tableName = $window.g_form.getTableName();
				if (tableName == 'ni') {
					// Service Catalog
					var variableSysID = fieldName.split(':')[1];
					fieldName = $window.g_form.resolvePrettyNameMap('IO:' + variableSysID);
				} else {
					fieldName = id.substring(id.indexOf(tableName) + tableName.length + 1);
				}
			}
			
			// if this callback is registered before the OOTB callback which creates the context menu,
			// either the context menu variable (window.gcm) isn't created at all or it is created in 
			// the next browser tick - by using setTimeout, we make sure that this callback
			// is executed *after* the ootb handler (which initializes the gcm variable)
			$window.setTimeout(function () {
				if ($window.gcm && $window.document.getElementById($window.gcm.getID())) {
					var itemsAdded = 0;
					var devopsMenu = new $window.GwtContextMenu('devops_field_menu');
					devopsMenu.clear();
					
					var $context = {
						FIELD: fieldName
					};
					
					$config.fieldItems.forEach(function (item) {						
						var conditionScript = item.condition_script;
						if (conditionScript) {
							if (new $window.Function('script', '$context', 'return eval(script)')(conditionScript, $context) != true) {
								return;
							}
						}
						
						if (item.item_type == '' || item.item_type == 'link') {
							devopsMenu.addFunc(item.label, function () {
								new $window.Function('script', '$context', 'return eval(script)')(item.script, $context);
							});	
						} else if (item.item_type == 'menu') {
							devopsMenu.addMenu(
								item.label,
								new $window.Function('script', '$context', 'return eval(script)')( conditionScript, $context)
							);
						} else {
							return;
						}
						
						itemsAdded++;
					});

					if (itemsAdded) {
						$window.gcm.addLine();
						$window.gcm.addMenu('DevOps+', devopsMenu);
					}
				}
			});
		});
		
		var bcm = null;
		var ootbContextMenu = $window.GwtContextMenu;
		$window.GwtContextMenu = $window.Class.create(ootbContextMenu, {
			initialize: function (id) {
				if (id == 'context_breadcrumb_menu') {
					bcm = this;
				}
				
				ootbContextMenu.prototype.initialize.apply(this, arguments);
			},
			
			type: 'DevopsContextMenu'
		});
		
		var observer = new $window.MutationObserver(function (mutations) {
			for (var i = 0; i < mutations.length; i++) {
				var mutation = mutations[i];
				if (mutation.addedNodes) {
					for (var j = 0; j < mutation.addedNodes.length; j++) {
						var node = mutation.addedNodes[j];
						if (node.classList && node.classList.contains('breadcrumb_link')) {
							injectBreadCrumbContextMenu(node);
						}
					}
				}
			}   
		});
		
		observer.observe($window.document, {
			childList: true,
			subtree: true
		});
		/*$window.addAfterPageLoadedEvent(function () {
			$window.document.querySelectorAll('.breadcrumb_link').forEach(function (element) {
				injectBreadCrumbContextMenu(element);
			});
		});*/
		
		var breadCrumbInjected = [];
		/*$window.document.querySelectorAll('.breadcrumb_link').forEach(function (element) {
			injectBreadCrumbContextMenu(element);
		});*/
		
		function injectBreadCrumbContextMenu(element) {
			if (breadCrumbInjected.indexOf(element) != -1) {
				return;
			}
			
			breadCrumbInjected.push(element);
			element.addEventListener('contextmenu', function () {
				var listID = element.closest('span.breadcrumb_container').getAttribute('list_id');
				var filter = getFilter(element);
				$window.setTimeout(function () {
					if (bcm && $window.document.getElementById(bcm.getID())) {
						var itemsAdded = 0;
						var devopsMenu = new $window.GwtContextMenu('devops_breadcrumbs_menu');
						devopsMenu.clear();

						var $context = {
							LISTID: listID,
							FILTER: filter
						};
						$config.breadcrumbItems.forEach(function (item) {
							var conditionScript = item.condition_script;
							if (conditionScript) {
								if (new $window.Function('script', '$context', 'return eval(script)')(conditionScript, $context) != true) {
									return;
								}
							}
							
							if (item.item_type == '' || item.item_type == 'link') {
								devopsMenu.addFunc(item.label, function () {
									new $window.Function('script', '$context', 'return eval(script)')(item.script, $context);
								});
							} else if (item.item_type == 'menu') {
								devopsMenu.addMenu(item.label, new $window.Function('script', '$context', 'return eval(script)')(item.script, $context));
							} else {
								return;
							}
							
							itemsAdded++;
						});

						if (itemsAdded) {
							bcm.addLine();
							bcm.addMenu('DevOps+', devopsMenu);
						}
					}
				});
			});
		}
		
		function getFilter(element) {
			while (element && !element.hasAttribute('filter')) {
				element = element.parentElement;
			}
			
			return (element && element.getAttribute('filter')) || '';
		}
	}
	
	function injectHeaderMenu($window, $config) {
		var headerMenu = $window.gcmSection || $window.headerGCM;
		if (headerMenu) {
			addHeaderMenuItems($window, $config, headerMenu);
		} else {
			Object.defineProperty($window, 'gcmSection', {
				configurable: true,
				set: function (v) {
					Object.defineProperty($window, 'gcmSection', {
						configurable: true, enumerable: true, writable: true, value: v 
					});
					
					// right after setting the value, the menu gets .clear()-ed
					// the DevOps+ menu building needs to be postponed slightly
					$window.setTimeout(function () {
						addHeaderMenuItems($window, $config, v);
					});
				}
			});
			
			Object.defineProperty($window, 'headerGCM', {
				configurable: true,
				set: function (v) {
					Object.defineProperty($window, 'headerGCM', {
						configurable: true, enumerable: true, writable: true, value: v 
					});
					
					// right after setting the value, the menu gets .clear()-ed
					// the DevOps+ menu building needs to be postponed slightly
					$window.setTimeout(function () {
						addHeaderMenuItems($window, $config, v);
					});
				}
			});
		}
		
		function addHeaderMenuItems($window, $config, headerMenu) {
			// by this time the g_form should have already loaded...
			if (!$window.g_form) {
				return;
			}
			
			var itemsAdded = 0;
			var devopsMenu = new $window.GwtContextMenu('devops_header_menu');
			$config.headerItems.forEach(function (item) {
				var $context = {};
				var conditionScript = item.condition_script;
				if (conditionScript) {
					if (new $window.Function('script', '$context', 'return eval(script)')(conditionScript, $context) != true) {
						return;
					}
				}

				
				if (item.item_type == '' || item.item_type == 'link') {
					devopsMenu.addFunc(item.label, function () {
						new $window.Function('script', '$context', 'return eval(script)')(item.script, $context);
					});
				} else if (item.item_type == 'menu') {
					devopsMenu.addMenu(item.label, new $window.Function('script', '$context', 'return eval(script)')(item.script, $context));
				} else {
					return;
				}
				
				itemsAdded++;
			});

			if (itemsAdded) {
				headerMenu.addLine();
				headerMenu.addMenu('DevOps+', devopsMenu);
			}
		}
	}
})();
]]></script>
        <script_name>context_menu</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-06 18:59:03</sys_created_on>
        <sys_id>7b24430d97d32110d70ef207f053af66</sys_id>
        <sys_mod_count>76</sys_mod_count>
        <sys_name>x_424426_devops.context_menu</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_ui_script_7b24430d97d32110d70ef207f053af66</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-28 16:00:36</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
